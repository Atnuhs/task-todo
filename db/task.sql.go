// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: task.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createTask = `-- name: CreateTask :exec
INSERT INTO tasks (task_id, task_name) 
VALUES ($1, $2)
`

type CreateTaskParams struct {
	TaskID   uuid.UUID
	TaskName string
}

func (q *Queries) CreateTask(ctx context.Context, arg CreateTaskParams) error {
	_, err := q.db.Exec(ctx, createTask, arg.TaskID, arg.TaskName)
	return err
}

const getTask = `-- name: GetTask :one
SELECT id, task_id, task_name, status, created_at FROM tasks
WHERE task_id = $1
`

func (q *Queries) GetTask(ctx context.Context, taskID uuid.UUID) (Task, error) {
	row := q.db.QueryRow(ctx, getTask, taskID)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.TaskID,
		&i.TaskName,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getTasks = `-- name: GetTasks :many
SELECT id, task_id, task_name, status, created_at FROM tasks
ORDER BY created_at
`

func (q *Queries) GetTasks(ctx context.Context) ([]Task, error) {
	rows, err := q.db.Query(ctx, getTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Task
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.TaskID,
			&i.TaskName,
			&i.Status,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskState = `-- name: UpdateTaskState :exec
UPDATE tasks SET status = $2
WHERE task_id = $1
`

type UpdateTaskStateParams struct {
	TaskID uuid.UUID
	Status TaskStatus
}

func (q *Queries) UpdateTaskState(ctx context.Context, arg UpdateTaskStateParams) error {
	_, err := q.db.Exec(ctx, updateTaskState, arg.TaskID, arg.Status)
	return err
}
