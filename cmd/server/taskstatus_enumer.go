// Code generated by "enumer -type=TaskStatus"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _TaskStatusName = "PendingDoingCompletedCancelledUnknown"

var _TaskStatusIndex = [...]uint8{0, 7, 12, 21, 30, 37}

const _TaskStatusLowerName = "pendingdoingcompletedcancelledunknown"

func (i TaskStatus) String() string {
	if i < 0 || i >= TaskStatus(len(_TaskStatusIndex)-1) {
		return fmt.Sprintf("TaskStatus(%d)", i)
	}
	return _TaskStatusName[_TaskStatusIndex[i]:_TaskStatusIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _TaskStatusNoOp() {
	var x [1]struct{}
	_ = x[Pending-(0)]
	_ = x[Doing-(1)]
	_ = x[Completed-(2)]
	_ = x[Cancelled-(3)]
	_ = x[Unknown-(4)]
}

var _TaskStatusValues = []TaskStatus{Pending, Doing, Completed, Cancelled, Unknown}

var _TaskStatusNameToValueMap = map[string]TaskStatus{
	_TaskStatusName[0:7]:        Pending,
	_TaskStatusLowerName[0:7]:   Pending,
	_TaskStatusName[7:12]:       Doing,
	_TaskStatusLowerName[7:12]:  Doing,
	_TaskStatusName[12:21]:      Completed,
	_TaskStatusLowerName[12:21]: Completed,
	_TaskStatusName[21:30]:      Cancelled,
	_TaskStatusLowerName[21:30]: Cancelled,
	_TaskStatusName[30:37]:      Unknown,
	_TaskStatusLowerName[30:37]: Unknown,
}

var _TaskStatusNames = []string{
	_TaskStatusName[0:7],
	_TaskStatusName[7:12],
	_TaskStatusName[12:21],
	_TaskStatusName[21:30],
	_TaskStatusName[30:37],
}

// TaskStatusString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func TaskStatusString(s string) (TaskStatus, error) {
	if val, ok := _TaskStatusNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _TaskStatusNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to TaskStatus values", s)
}

// TaskStatusValues returns all values of the enum
func TaskStatusValues() []TaskStatus {
	return _TaskStatusValues
}

// TaskStatusStrings returns a slice of all String values of the enum
func TaskStatusStrings() []string {
	strs := make([]string, len(_TaskStatusNames))
	copy(strs, _TaskStatusNames)
	return strs
}

// IsATaskStatus returns "true" if the value is listed in the enum definition. "false" otherwise
func (i TaskStatus) IsATaskStatus() bool {
	for _, v := range _TaskStatusValues {
		if i == v {
			return true
		}
	}
	return false
}
