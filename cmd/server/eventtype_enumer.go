// Code generated by "enumer -type=EventType"; DO NOT EDIT.

package main

import (
	"fmt"
	"strings"
)

const _EventTypeName = "TaskCreatedTaskPendingTaskStartedTaskCompletedTaskCanceledTaskUnknown"

var _EventTypeIndex = [...]uint8{0, 11, 22, 33, 46, 58, 69}

const _EventTypeLowerName = "taskcreatedtaskpendingtaskstartedtaskcompletedtaskcanceledtaskunknown"

func (i EventType) String() string {
	if i < 0 || i >= EventType(len(_EventTypeIndex)-1) {
		return fmt.Sprintf("EventType(%d)", i)
	}
	return _EventTypeName[_EventTypeIndex[i]:_EventTypeIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _EventTypeNoOp() {
	var x [1]struct{}
	_ = x[TaskCreated-(0)]
	_ = x[TaskPending-(1)]
	_ = x[TaskStarted-(2)]
	_ = x[TaskCompleted-(3)]
	_ = x[TaskCanceled-(4)]
	_ = x[TaskUnknown-(5)]
}

var _EventTypeValues = []EventType{TaskCreated, TaskPending, TaskStarted, TaskCompleted, TaskCanceled, TaskUnknown}

var _EventTypeNameToValueMap = map[string]EventType{
	_EventTypeName[0:11]:       TaskCreated,
	_EventTypeLowerName[0:11]:  TaskCreated,
	_EventTypeName[11:22]:      TaskPending,
	_EventTypeLowerName[11:22]: TaskPending,
	_EventTypeName[22:33]:      TaskStarted,
	_EventTypeLowerName[22:33]: TaskStarted,
	_EventTypeName[33:46]:      TaskCompleted,
	_EventTypeLowerName[33:46]: TaskCompleted,
	_EventTypeName[46:58]:      TaskCanceled,
	_EventTypeLowerName[46:58]: TaskCanceled,
	_EventTypeName[58:69]:      TaskUnknown,
	_EventTypeLowerName[58:69]: TaskUnknown,
}

var _EventTypeNames = []string{
	_EventTypeName[0:11],
	_EventTypeName[11:22],
	_EventTypeName[22:33],
	_EventTypeName[33:46],
	_EventTypeName[46:58],
	_EventTypeName[58:69],
}

// EventTypeString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func EventTypeString(s string) (EventType, error) {
	if val, ok := _EventTypeNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _EventTypeNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to EventType values", s)
}

// EventTypeValues returns all values of the enum
func EventTypeValues() []EventType {
	return _EventTypeValues
}

// EventTypeStrings returns a slice of all String values of the enum
func EventTypeStrings() []string {
	strs := make([]string, len(_EventTypeNames))
	copy(strs, _EventTypeNames)
	return strs
}

// IsAEventType returns "true" if the value is listed in the enum definition. "false" otherwise
func (i EventType) IsAEventType() bool {
	for _, v := range _EventTypeValues {
		if i == v {
			return true
		}
	}
	return false
}
